datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String   @id @default(cuid())
  provider       String
  providerId     String   @unique
  email          String?  @unique
  name           String?
  avatarUrl      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  refreshTokens RefreshToken[]
  conversations Conversation[]

  @@map("users")
}

model Conversation {
  id              String   @id @default(uuid())
  title           String?
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages        Message[]

  @@map("conversations")
}

model Message {
  id              String   @id @default(uuid())
  conversationId  String
  content         String
  role            String
  modelId         String?  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  conversation    Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Add index for efficient queries by model
  @@index([modelId])
  @@index([conversationId, modelId])
  @@map("messages")
}

model RefreshToken {
  id               String   @id @default(cuid())
  tokenHash        String   @unique            // hash(token) stored; never store raw token
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  expiresAt        DateTime
  revokedAt        DateTime?
  replacedByToken  String?                      // raw *child* token string (to help reuse detection chain)
  createdByIp      String?
  userAgent        String?

  @@index([userId])
  @@index([expiresAt])
}